@use "./Profile" as ps;

//
@property --translate-x { initial-value: 0px; syntax: "<length-percentage>"; inherits: false; };
@property --translate-y { initial-value: 0px; syntax: "<length-percentage>"; inherits: false; };
@property --opacity { initial-value: 1; syntax: "<number>"; inherits: false; };
@property --scale { initial-value: 1; syntax: "<number>"; inherits: false; };

//
@layer u2-normalize {

    //
    @layer ux-agate;

    //
    @media screen {

        //
        :where(html, body) {
            //
            & {
                padding: 0px;
                margin: 0px;
                inset: 0px;
                border: none 0px transparent;
                background-color: transparent;
            }

            //
            & { @include ps.HQRendering(); };
        }

        //
        :where(*), ::slotted(*) {
            transition-behavior: allow-discrete;
            interpolate-size: allow-keywords;
            box-sizing: border-box;
            background-image: none;
            mask-image: none;
        }

        //
        ui-frame, ui-modal, .ui-grid-item { @include ps.LQRendering(); };

        // if there is nothing, why there is needs content?
        *:not(img, canvas, ui-icon, video, picture, input, ui-calendar, ui-status, ui-statusbar, ui-navbar, ui-taskbar, ui-task, iframe):empty { content-visibility: hidden; }

        //
        [data-dragging], :where(ui-frame, ui-modal, .ui-grid-item):active {
            will-change: transform;
            @include ps.LQRendering();
        };

        //
        ui-icon, body, html, canvas, img, #markdown, #viewport, [data-hidden], #markdown, #markdown * { content-visibility: auto; };

        //
        #markdown * {
            contain-intrinsic-block-size: auto 1em;
        }

        //
        [data-hidden] #markdown {
            display: none !important;
            content-visibility: hidden !important;
        }

        //
        [data-dragging] #markdown {
            content-visibility: hidden !important;
            :where(*) {
                content-visibility: hidden !important;
            }
        }

        //
        #markdown { isolation: isolate; touch-action: pan-y; };

        //
        :where(:root, body, html, button) {
            font-family: 'Open Sans', 'Gill Sans Nova', Ubuntu, 'DejaVu Sans', Candara, Segoe, "Segoe UI", Optima, source-sans-pro, sans-serif;
            //@include dFont.applyFont(0.9rem);
        }

        //
        :host, :scope, :root {

            //
            :where(*) {
                touch-action: none;

                //
                -webkit-user-select: none;
                -khtml-user-select: none;
                -moz-user-select: none;
                -o-user-select: none;
                -ms-user-select: none;
                user-select: none;

                //
                -webkit-tap-highlight-color: transparent;
                -moz-tap-highlight-color: transparent;
            }

            //
            :where(button, input, form) {
                border: none;
                outline: none;
            }

            //
            :where(img, picture, span, a, button, input, svg, video, canvas) {
                touch-action: none;
                -webkit-user-drag: none;
                -khtml-user-drag: none;
                -moz-user-drag: none;
                -o-user-drag: none;
                -ms-user-drag: none;
                user-drag: none;
            }

            //
            :where(canvas, img, picture, video) {
                user-select: none;
                pointer-events: none;
                overflow: hidden;
            }

            //
            :where(picture) {
                display: contents;
            }

            //
            :dir(rtl) :where(*), :where(*):dir(rtl) {
                direction: rtl;
            }

            //
            :dir(ltr) :where(*), :where(*):dir(ltr) {
                direction: ltr;
            }

            //
            :where(.lucide, svg) {

                //
                & {
                    inline-size: max-content;
                    block-size: 100%;
                    transform: translateZ(0px);

                    //
                    stroke: var(--current-glyph-color, currentColor);
                }

                //
                & {
                    interactivity: inert;
                    pointer-events: none;
                    user-select: none;
                    touch-action: none;
                }

                //
                //& { @include ps.HQRendering(); };
                & { @include ps.LQRendering(); };
            }

            //
            :where(ui-icon, label, form) {
                @include ps.LQRendering();
            }

            //
            :where([inert], *[inert]) {
                pointer-events: none !important;
                user-select: none !important;
                touch-action: none !important;
            }

            //
            @media (prefers-reduced-motion: reduce) {
                :where(*),
                ::after,
                ::before {
                    animation-delay: -1ms !important;
                    animation-duration: 1ms !important;
                    animation-iteration-count: 1 !important;
                    background-attachment: initial !important;
                    scroll-behavior: auto !important;
                    transition-delay: 0s !important;
                    transition-duration: 0s !important;
                }
            }

            //
            :where(button) {
                display: flex;
                place-items: center;
                place-content: center;

                //
                color: var(--current-glyph-color);
                background-color: var(--current-surface-color);

                //
                cursor: pointer;
                pointer-events: auto;

                //
                padding: 0px;
                margin: 0px;

                //
                border: none 0px transparent;
                outline: none 0px transparent;

                //
                line-height: 0px;
            }

            //
            :where(a, span) {
                text-decoration: none;
                background-color: transparent;
                place-content: center;
                place-items: center;
                justify-content: start;
            }

            // relative by default
            :where(label) { position: relative; }
            :where(.space, flex-space) {
                flex-grow: 1;
                flex-shrink: 0;
            }

            //
            :where(.break, flex-break, br) {
                flex-basis: 100%;
                flex-grow: 1;
                flex-shrink: 0;
            }

            // weird idea...
            label > input:where([type="radio"], [type="checkbox"]) {
                display: none;
                pointer-events: none;
            }

            // able to select inputs when edit
            :where(input[type="text"], input[type="number"]) {
                user-select: auto;
            }

        }

        //
        :where(head, script, style, link, meta) {
            display: none !important;
            user-select: none !important;
            pointer-events: none !important;
        }

        //
        [data-dragging] {
            // strictly forbid backdrop filter
            &, & * { backdrop-filter: none !important; };
            & * { pointer-events: none !important; };
        }
    };
};
