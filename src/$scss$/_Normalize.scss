@use "./Profile" as ps;

//
@layer u2-normalize {

    //
    :where(html, body) {
        //
        & {
            padding: 0px;
            margin: 0px;
            inset: 0px;
            border: none 0px transparent;
            background-color: transparent;
        }

        //
        & { @include ps.HQRendering(); };
    }

    //
    :where(*), ::slotted(*) {
        transition-behavior: allow-discrete;
        interpolate-size: allow-keywords;
    }

    //
    :root, :where(html) {
        container-type: size;
        container-name: html root;
    }

    //
    :root, :host, :scope, :where(body) {
        //will-change: --keyboard-inset-bottom, --keyboard-inset-height, inset;
        pointer-events: auto;

        //
        transition-behavior: allow-discrete;
        interpolate-size: allow-keywords;

        //
        --keyboard-inset-bottom: calc(max(env(keyboard-inset-bottom, 0px), 0px) / max(var(--zoom, 1), 0.125));
        --keyboard-inset-height: calc(max(env(keyboard-inset-height, 0px), 0px) / max(var(--zoom, 1), 0.125));
    }

    //
    :where(:root, body, html, button) {
        font-family: Calibri, Carlito, Caliburn, Seravek, 'Gill Sans Nova', Ubuntu, 'DejaVu Sans', Candara, Segoe, "Segoe UI", Optima, source-sans-pro, sans-serif;
        //@include dFont.applyFont(0.9rem);
    }

    //
    :where(head, script, style) {
        user-select: none !important;
        pointer-events: none !important;
        display: none !important;
    }

    //
    :where(html) {
        translate: 0px 0px !important;
        transform: none !important;
        margin: 0px !important;
        inset: 0px !important;

        //
        background-color: transparent;

        //
        overflow: visible;
        position: relative;
        display: contents;
        line-height: 0;
        contain: none;
        flex-direction: column;

        //
        min-inline-size: 0px;
        min-block-size: 0px;

        //
        inline-size: calc(100dvi / max(var(--zoom, 1), 0.125));
        block-size: calc(100dvb / max(var(--zoom, 1), 0.125));

        //
        max-inline-size: calc(100dvi / max(var(--zoom, 1), 0.125));
        max-block-size: calc(100dvb / max(var(--zoom, 1), 0.125));

        //
        place-content: safe start;
        place-items: safe start;
        place-self: safe start;
    }

    //
    :where(body) {
        @include ps.vp-vars();

        //
        & {
            $zoom: 1;

            //
            inline-size: calc(var(--vp-i-size, 100dvi) * $zoom);
            block-size: calc(var(--vp-b-size, 100dvb) * $zoom);

            //
            max-inline-size: calc(100dvi * $zoom);
            max-block-size: calc(100dvb * $zoom);
        }

        //
        & {
            translate: 0px 0px !important;
            transform: none !important;
            margin: 0px !important;

            //
            font-size: 0.9rem;

            //
            overflow: hidden;
            position: relative;
            pointer-events: auto;
            inset: 0px;

            //
            display: inline flex;
            place-content: safe center;
            place-items: safe center;
            place-self: safe center;

            //
            background-color: var(--theme-base-color, transparent);

            // if needs viewport
            container-name: body;
            container-type: size;
            contain: content;

            //
            //will-change: --keyboard-inset-bottom, --keyboard-inset-height, inset;

            //
            min-inline-size: 1px;
            min-block-size: 1px;
        }

        //
        & > :where(*) {
            display: grid;
            place-self: safe center;
            grid-column: 1 / 1 span;
            grid-row: 1 / 1 span;
        }
    }

    //
    :host, :scope, :root {

        //
        :where(button, input, form) {
            border: none;
            outline: none;
        }

        //
        :where(*) {
            @include ps.disable-transform();

            //
            & {
                -webkit-user-select: none;
                -khtml-user-select: none;
                -moz-user-select: none;
                -o-user-select: none;
                -ms-user-select: none;
                user-select: none;

                //
                -webkit-user-drag: none;
                -khtml-user-drag: none;
                -moz-user-drag: none;
                -o-user-drag: none;
                -ms-user-drag: none;
                user-drag: none;

                //
                //-webkit-box-shadow: none;
                -webkit-tap-highlight-color: transparent;
                -moz-tap-highlight-color: transparent;
                //box-shadow: none;
                box-sizing: border-box;

                //
                touch-action: pan-y pan-x;
            }

            //
            &:not(ui-scrollbox) {
                // default effects
                --translate-x: 0px;
                --translate-y: 0px;
                --scale: 1;
                --opacity: 1;

                //
                //will-change: --translate-x, --translate-y, --scale, --opacity;
                transform: translate(var(--translate-x), var(--translate-y)) scale(var(--scale, 1));

                // mobile too slow
                //filter: opacity(var(--opacity, 1));
                //opacity: 1;

                opacity: var(--opacity, 1);
            }
        }

        //
        :where(canvas, img, picture, video) {
            user-select: none;
            pointer-events: none;
            overflow: hidden;
        }

        //
        :where(picture) {
            display: contents;
        }

        //
        :dir(rtl) :where(*), :where(*):dir(rtl) {
            direction: rtl;
        }

        //
        :dir(ltr) :where(*), :where(*):dir(ltr) {
            direction: ltr;
        }

        //
        :where(.lucide, svg) {

            //
            & {
                inline-size: max-content;
                block-size: 100%;
                aspect-ratio: 1 / 1;

                //
                container-type: normal;
                contain: none;
                will-change: auto;

                //
                transform: none;
                translate: 0px 0px;

                //
                object-fit: contain;
                object-position: center center;
                place-items: center;
                place-content: center;

                //
                filter: none;
                backdrop-filter: none;

                //
                stroke: var(--current-glyph-color, currentColor);
            }

            & {
                interactivity: inert;
                pointer-events: none;
                user-select: none;
                touch-action: none;
            }

            //
            //& { @include ps.HQRendering(); };
            & { @include ps.LQRendering(); };
        }

        //
        :where(ui-icon) {
            @include ps.LQRendering();
        }

        //
        :where([inert], *[inert]) {
            pointer-events: none !important;
            //interactivity: inert !important;
            user-select: none !important;
            touch-action: none !important;
        }

        //
        @media (prefers-reduced-motion: reduce) {
            :where(*),
            ::after,
            ::before {
                animation-delay: -1ms !important;
                animation-duration: 1ms !important;
                animation-iteration-count: 1 !important;
                background-attachment: initial !important;
                scroll-behavior: auto !important;
                transition-delay: 0s !important;
                transition-duration: 0s !important;
            }
        }

        //
        :where(button) {
            display: flex;
            place-items: safe center;
            place-content: safe center;

            //
            color: var(--current-glyph-color);
            background-color: var(--current-surface-color);

            //
            cursor: pointer;
            pointer-events: auto;

            //
            padding: 0px;
            margin: 0px;

            //
            border: none 0px transparent;
            outline: none 0px transparent;

            //
            line-height: 0px;
        }

        //
        :where(a, span) {
            text-decoration: none;
            background-color: transparent;
            place-content: safe center;
            place-items: safe center;
            justify-content: start;
        }

        // relative by default
        :where(label) { position: relative; }
        :where(body) :where(div, label) {
            display: inline flex;
            flex-direction: row;
            flex-wrap: wrap;
            box-sizing: border-box;

            //
            container-type: normal;
            contain: none;

            //
            place-items: safe center;
            place-content: safe center;

            //
            min-inline-size: 0px;
            min-block-size: 0px;
            inline-size: max-content;
            block-size: max-content;
            max-inline-size: none;
            max-block-size: none;

            //
            gap: 0px;
            padding: 0px;
            margin: 0px;
            //border: none 0px transparent;

            //
            inset: 0px;
            inset-inline-end: auto;
            inset-block-end: auto;
        }

        //
        :where(.space, flex-space) {
            flex-grow: 1;
            flex-shrink: 0;
        }

        //
        :where(.break, flex-break, br) {
            flex-basis: 100%;
            flex-grow: 1;
            flex-shrink: 0;
        }

        // weird idea...
        label > input:where([type="radio"], [type="checkbox"]) {
            display: none;
            pointer-events: none;
        }

        // able to select inputs when edit
        :where(input[type="text"], input[type="number"]) {
            user-select: auto;
        }

    }

};
